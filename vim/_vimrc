" 关闭兼容模式, 默认情况下, Vim 会以兼容 Vi 的模式运行, 所以一定要关闭.
set nocompatible

" ======== 环境判断 start ========
" 判断是 Windows 还是 Linux.
let g:isWindows = 0
let g:isLinux = 0
if (has("win32") || has("win64"))
    let g:isWindows = 1
else
    let g:isLinux = 1
endif
" 判断是终端还是 gVim
let g:isGUI = 1
if has("gui_running")
    let g:isGUI = 1
else
    let g:isGUI = 0
endif
" ======== 环境判断 end ========

" ======== gVim 原有配置 start ========
if (g:isWindows)
    " 加载一些默认配置
    source $VIMRUNTIME/vimrc_example.vim
    " 模仿 Windows 快捷键, 例如 ctrl-s, ctrl-c, ctrl-v 等等
    source $VIMRUNTIME/mswin.vim
    " 模仿 Windows 的行为, 这一行很重要, 没有这行的话, 最大化经常出问题.
    behave mswin
elseif (g:isLinux)
    if (g:isGUI)
        " Source a global configuration file if available
        if filereadable("/etc/vim/gvimrc.local")
            source /etc/vim/gvimrc.local
        endif
    else
        set mouse=a                    " 在任何模式下启用鼠标
        set t_Co=256                   " 在终端启用256色
        set backspace=2                " 设置退格键可用
        " Source a global configuration file if available
        if filereadable("/etc/vim/vimrc.local")
            source /etc/vim/vimrc.local
        endif
    endif
endif
" ======== gVim 原有配置 end ========

" ======== UI和基本配置 start ========
" 设置字体
if (g:isWindows)
    set guifont=Consolas:h14
elseif (g:isLinux)
    set guifont=Courier\ 14
endif

" GUI 的设置
if (g:isGUI)
    " 关闭工具栏
    set guioptions-=T
    " 关闭菜单
    set guioptions-=m
    " 启动时最大化
    autocmd GUIEnter * simalt ~x
endif

" 只在需要的时候才重新绘制界面
set lazyredraw
" ======== UI和基本配置 end ========

" ======== 编码 start ========
" 设置vim内部编码
set encoding=utf-8
" 设置编辑文件时的编码
set fileencoding=utf-8
" 设置终端编码
set termencoding=utf-8
" 设置 Vim 能识别的编码
set fileencodings=ucs-bom,utf-8,cp936,gb18030,gb2312,big5,cuc-jp,cuc-kr,latin
" 防止特殊符号无法显示
set ambiwidth=double
" 解决console输出乱码
language messages zh_CN.utf-8
" ======== 编码 end ========

" ======== 文件相关配置 start ========
" 自动检测文件类型和缩进格式, 并根据文件类型加载插件
filetype plugin indent on
" 文件被外部改动后, 自动加载
set autoread
" 关于备份文件, 临时文件, undo 文件, 最好的做法是把他们配置到单独的文件夹里
" 这里暂时都不让生成了, 以后可以再改.
" 不生成备份文件
set nobackup
" 不生成临时文件
set noswapfile
" 不生成 undo 文件
set noundofile
" ======== 文件相关配置 end ========

" ======== 编辑器配置 start ========
" 显示行号
set number
" 显示语法高亮
syntax enable
syntax on
" 显示 tab(>---), 空格(^), 换行(¬)
set list
set listchars=tab:>-,trail:^ ",eol:¬
" 突出显示当前行
set cursorline
" 开启自动缩进
set autoindent
" 智能缩进
set smartindent
" 缩进尺寸为4个空格
set shiftwidth=4
" Tab键相当于4个空格
set tabstop=4
set softtabstop=4
set expandtab
" 智能缩进
set smarttab
" ======== 编辑器配置 end ========

" ======== 搜索和匹配 start ========
" 高亮显示匹配的括号
set showmatch
" 高亮显示搜索到的关键字
set hlsearch
" 即时搜索
set incsearch
" 智能大小写敏感, 只要有一个字母大写, 就大小写敏感, 否则不敏感
set ignorecase smartcase
" ======== 搜索和匹配 start ========

" ======== 操作习惯和快捷键 ========
" 将 esc 配置成 kk
inoremap kk <esc>
" ctrl-h  光标左移一格
imap <c-h> <left>
" ctrl-j  垂直下移一行
imap <c-j> <down>
" ctrl-k  垂直上移一行
imap <c-k> <up>
" ctrl-l  光标右移一格
imap <c-l> <right>
" 在可视模式下使用p粘贴时不替换寄存器内容, 这里是利用了黑洞寄存器
vnoremap p "_dP
" 对于很长的行, vim会自动换行, 此时 j 或者 k 就会一下跳很多行,
" 使用 gk,gj 可以避免跳过多行, 但是不方便, 所以做了如下映射.
nnoremap k gk
nnoremap j gj

" 将 <leader> 键配置为 ';'
let mapleader=";"
" 按 <leader>w 保存文件
nmap <leader>w :w<cr>
" 可视模式下按 <leader>y 将内容写入系统寄存器
vnoremap <leader>y "+y
" 按 <leader>p 将系统寄存器中的内容粘贴出来
nmap <leader>p "+p
" 按 <leader>no 取消搜索高亮, 没错, <leader> 键后面可以跟键序列
nmap <leader>no :nohlsearch<cr>

" ======== vim-plug 配置 start ========
call plug#begin('$VIM/vimfiles/vim-plug')
" Solarized 主题
Plug 'altercation/vim-colors-solarized'
" PaperColor 主题
Plug 'nlknguyen/papercolor-theme'
" The Nerd Tree, 目录树
Plug 'scrooloose/nerdtree'
" surround, 快速添加成对符号
Plug 'tpope/vim-surround'
" CtrlP, 快速查找
Plug 'ctrlpvim/ctrlp.vim'
" UltiSnips, 代码片段
Plug 'sirver/ultisnips'
" Multiple Cursors, 多光标编辑
Plug 'terryma/vim-multiple-cursors'
" SuperTab, Tab键增强
Plug 'ervandew/supertab'
" vim-airline, 底部状态栏增强
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" fugitive, Git 增强插件
Plug 'tpope/vim-fugitive'
" Tabular, 一个用于代码对齐的插件
Plug 'godlygeek/tabular'
" Vim Markdown, 依赖 Tabular
Plug 'plasticboy/vim-markdown'
" Emmet
Plug 'mattn/emmet-vim'
call plug#end()
" ======== vim-plug 配置 end ========

" ======== 主题 start ========
if (g:isGUI)
    set background=light
else
    set background=dark
endif
"colorscheme solarized
colorscheme PaperColor
" ======== 主题 end ========

" ======== 插件配置: nerdtree start ========
" 显示隐藏文件
let NERDTreeShowHidden=1
" 显示书签
let NERDTreeShowBookmarks=1
" 设置箭头样式
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" <leader>h 切换显示
nmap <leader>h :NERDTreeToggle<cr>
" ======== 插件配置: nerdtree end ========

" ======== 插件配置: vim-markdown start ========
" ======== 插件配置: vim-markdown end ========

" ======== 插件配置: surround start ========
" 给单词两边加上空格
nmap <leader><space><space> ysiw<space><space>
" 给单词左边加上空格
nmap <leader><space>h bi<space><esc>w
" 给单词右边加上空格
nmap <leader><space>l ea<space><esc>b
" ======== 插件配置: surround end ========


